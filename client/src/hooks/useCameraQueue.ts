import { useCallback, useRef } from 'react';

import { moveCamera, stopCamera } from '../http/cameraAPI';

import type { ZoomValues } from '../types/zoom';
import type { ClickType } from '../types/joystik';

import { getCameraDelta } from '../utils/func';

// –û–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∫–∞–º–µ—Ä–µ
interface CameraCommand {
    type: 'move' | 'zoom' | 'stop';  // –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã  
    data: any;                       // –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
    timestamp: number;               // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
}

export const useCameraQueue = (cameraId: "cam1" | "cam2") => {
    //  –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ - –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const commandQueue = useRef<CameraCommand[]>([]);

    // –§–ª–∞–≥ "—Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É" - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    const isProcessing = useRef(false);

    // ‚è±–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã - –¥–ª—è –¥–µ–±–∞–≥–∞
    const lastCommandTime = useRef(0);

    // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥
    const processQueue = useCallback(async () => {
        // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ò–õ–ò –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º
        if (isProcessing.current || commandQueue.current.length === 0) {
            return; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }

        // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        isProcessing.current = true;

        try {
            // üì§ –ë–µ—Ä–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
            const latestCommand = commandQueue.current.pop()!;

            // üóëÔ∏è –û—á–∏—â–∞–µ–º –≤—Å—é –æ—á–µ—Ä–µ–¥—å (–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã)
            commandQueue.current.length = 0;

            // üìä –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log(`[${cameraId}] –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É:`, latestCommand.type);

            // üéÆ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            switch (latestCommand.type) {
                case 'move':
                    // –î–≤–∏–≥–∞–µ–º –∫–∞–º–µ—Ä—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                    await moveCamera(latestCommand.data, cameraId);
                    break;

                case 'zoom':
                    // –ó—É–º–∏–º –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    if (latestCommand.data.zoom === "neutral") {
                        await stopCamera(cameraId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    } else {
                        // –ó—É–º–∏–º –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
                        await moveCamera({
                            x: 0,
                            z: latestCommand.data.zoom === "down" ? -0.5 : 0.5,
                            y: 0
                        }, cameraId);
                    }
                    break;

                case 'stop':
                    // –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
                    await stopCamera(cameraId);
                    break;

                default:
                    console.warn(`[${cameraId}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã:`, latestCommand.type);
            }

            // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            lastCommandTime.current = Date.now();
            console.log(`[${cameraId}] –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

        } catch (error: any) {
            // ‚ùå –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–ø–∞–ª–∞ - –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            console.error(`[${cameraId}] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:`, error.message);
            // –ù–ï –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        } finally {
            // üîì –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            isProcessing.current = false;

            // üîÑ –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ 50–º—Å
            if (commandQueue.current.length > 0) {
                console.log(`[${cameraId}] –í –æ—á–µ—Ä–µ–¥–∏ –µ—â–µ ${commandQueue.current.length} –∫–æ–º–∞–Ω–¥`);
                setTimeout(processQueue, 50); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
            }
        }
    }, [cameraId]);

    // üì• –§–£–ù–ö–¶–ò–Ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥—å
    const queueCommand = useCallback((command: CameraCommand) => {
        // üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã) - –æ–Ω–∏ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã
        const now = Date.now();
        const oldLength = commandQueue.current.length;

        commandQueue.current = commandQueue.current.filter(
            cmd => now - cmd.timestamp < 1000 // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã
        );

        const removedCount = oldLength - commandQueue.current.length;
        if (removedCount > 0) {
            console.log(`[${cameraId}] –£–¥–∞–ª–µ–Ω–æ ${removedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–º–∞–Ω–¥`);
        }

        // ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
        commandQueue.current.push(command);
        console.log(`[${cameraId}] –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${command.type}`);

        // üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        processQueue();
    }, [processQueue]);

    // üîç –ü–£–ë–õ–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∑—É–º–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
    const handleZoom = useCallback((zoom: ZoomValues) => {
        console.log(`[${cameraId}] –ó–∞–ø—Ä–æ—Å –∑—É–º–∞:`, zoom);
        queueCommand({
            type: 'zoom',           // –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã
            data: { zoom },         // –î–∞–Ω–Ω—ã–µ - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑—É–º–∞
            timestamp: Date.now()   // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        });
    }, [queueCommand]);

    // üïπÔ∏è –ü–£–ë–õ–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
    const handleMove = useCallback((pressed: ClickType | null) => {
        console.log(`[${cameraId}] –ó–∞–ø—Ä–æ—Å –¥–≤–∏–∂–µ–Ω–∏—è:`, pressed);

        if (!pressed) {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            queueCommand({
                type: 'stop',
                data: {},
                timestamp: Date.now()
            });
        } else {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ - –¥–≤–∏–≥–∞–µ–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            queueCommand({
                type: 'move',
                data: getCameraDelta(pressed), // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                timestamp: Date.now()
            });
        }
    }, [queueCommand]);

    // üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    return {
        handleZoom,              // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑—É–º–∞
        handleMove,              // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è  
        isProcessing: isProcessing.current  // –§–ª–∞–≥ "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞"
    };
};
