import * as net from "net";
import * as winston from "winston";
import "winston-daily-rotate-file";

const transport = new winston.transports.DailyRotateFile({
  filename: "logs/multiviewer-%DATE%.log", // –õ–æ–≥-—Ñ–∞–π–ª—ã –±—É–¥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Å –¥–∞—Ç–æ–π
  datePattern: "YYYY-MM-DD", // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
  zippedArchive: true, // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
  maxSize: "20m", // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –±—É–¥–µ—Ç —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è)
  maxFiles: "30d", // –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
});

const logger = winston.createLogger({
  level: "info", // –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [transport],
});

const MV_HOST = process.env.MV_HOST ?? "";
const MV_PORT = process.env.MV_PORT ? +process.env.MV_PORT : 1010;
console.log(MV_HOST, MV_PORT);

let mvSocket: net.Socket | null = null;
let reconnectTimeout: NodeJS.Timeout | null = null;

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç –∏–ª–∏ null
 */
export function getMCSocket(): net.Socket | null {
  return mvSocket;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º—É–ª—å—Ç–∏–≤—å—é–≤–µ—Ä—É
 */
export function connectMV(): void {
  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout);
    reconnectTimeout = null;
  }

  mvSocket = new net.Socket();

  mvSocket.connect(MV_PORT, MV_HOST, () => {
    logger.info("‚úÖ Connected to multiviewer");
  });

  // mvSocket.on("data", (data) => {
  //   console.log("üì• Received from MV:", data.toString());
  // });

  mvSocket.on("error", (err) => {
    logger.info("‚ùå MV connection error:", err.message);
    scheduleReconnect();
  });

  mvSocket.on("end", () => {
    logger.info("üîå MV connection ended by server");
    scheduleReconnect();
  });

  mvSocket.on("close", (hadError) => {
    logger.info(`üö´ MV connection closed${hadError ? " due to error" : ""}`);
    scheduleReconnect();
  });
}

function scheduleReconnect(): void {
  if (!reconnectTimeout) {
    reconnectTimeout = setTimeout(() => {
      console.log("üîÑ Reconnecting to MV...");
      connectMV();
    }, 2000);
  }

  if (mvSocket) {
    mvSocket.destroy();
    mvSocket = null;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏
 * @param n - –Ω–æ–º–µ—Ä –ø—Ä–µ—Å–µ—Ç–∞ (1‚Äì4)
 * @returns true, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
 */
export function setPreset(n: number): boolean {
  if (n < 1 || n > 4) return false;
  if (!mvSocket || mvSocket.destroyed) {
    logger.info(`üö´ MV socket is undefined or destroyed`);
    return false;
  }

  const code = 4 + n;
  const cmd = `set window layout mode ${code}\r\n`;
  mvSocket.write(cmd);
  return true;
}
